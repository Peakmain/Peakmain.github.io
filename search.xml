<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Gradle+ASM实战——隐私方法问题彻底解决之AsmActualCombat开源库</title>
      <link href="/archives/e7b8587f.html"/>
      <url>/archives/e7b8587f.html</url>
      
        <content type="html"><![CDATA[<h1 id="AsmActualCombat"><a href="#AsmActualCombat" class="headerlink" title="AsmActualCombat"></a>AsmActualCombat</h1><ul><li>项目地址：<a href="https://github.com/Peakmain/AsmActualCombat">https://github.com/Peakmain/AsmActualCombat</a></li><li><strong>使用文档链接</strong>:<a href="https://github.com/Peakmain/AsmActualCombat/wiki">https://github.com/Peakmain/AsmActualCombat/wiki</a></li></ul><h3 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h3><h4 id="ASM全埋点功能"><a href="#ASM全埋点功能" class="headerlink" title="ASM全埋点功能"></a>ASM全埋点功能</h4><ul><li> $AppStart事件：应用程序启动启动事件。</li><li> $AppEnd事件:应用程序退出事件。</li><li>$AppViewScreen事件:应用程序页面浏览事件</li><li>$AppClick 事件:应用程序控件（View）点击事件,如:ImageView,Button,Dialog等</li><li>默认包含防止多次点击事件的处理</li><li>可动态设置方法对点击事件处理之前进行拦截，目前只支持对setOnClickListener进行拦截<h4 id="隐私方法调用处理"><a href="#隐私方法调用处理" class="headerlink" title="隐私方法调用处理"></a>隐私方法调用处理</h4></li><li>对调用隐私方法的方法体替换成自己的方法(支持动态替换方法)，如：设备id,Mac地址等</li></ul><h4 id="辅助功能"><a href="#辅助功能" class="headerlink" title="辅助功能"></a>辅助功能</h4><ul><li>可获取方法的耗时时间</li><li>打印方法的参数和返回值</li><li>打印方法的Frame</li><li>可动态配置是否开启插件，默认是开启</li></ul><h3 id="怎样使用"><a href="#怎样使用" class="headerlink" title="怎样使用"></a>怎样使用</h3><p><strong>ASM插件依赖</strong><br>Add it in your root build.gradle at the end of repositories:</p><figure class="highlight groovy"><table><tr><td class="code"><pre><code class="hljs groovy">buildscript &#123;<br>  repositories &#123;<br>    maven &#123;<br>      url <span class="hljs-string">&quot;https://plugins.gradle.org/m2/&quot;</span><br>    &#125;<br>  &#125;<br>  dependencies &#123;<br>    classpath <span class="hljs-string">&quot;io.github.peakmain:plugin:1.1.1&quot;</span><br>  &#125;<br>&#125;<br>apply <span class="hljs-attr">plugin:</span> <span class="hljs-string">&quot;com.peakmain.plugin&quot;</span><br></code></pre></td></tr></table></figure><p><strong>拦截事件sdk的依赖</strong></p><ul><li>Step 1. Add the JitPack repository to your build file<br>Add it in your root build.gradle at the end of repositories:<figure class="highlight groovy"><table><tr><td class="code"><pre><code class="hljs groovy">allprojects &#123;<br>repositories &#123;<br>...<br>maven &#123; url <span class="hljs-string">&#x27;https://jitpack.io&#x27;</span> &#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>Step 2. Add the dependency<figure class="highlight groovy"><table><tr><td class="code"><pre><code class="hljs groovy">dependencies &#123;<br>       implementation <span class="hljs-string">&#x27;com.github.Peakmain:AsmActualCombat:1.1.1&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用文档"><a href="#使用文档" class="headerlink" title="使用文档"></a>使用文档</h3><h4 id="Application中初始化"><a href="#Application中初始化" class="headerlink" title="Application中初始化"></a>Application中初始化</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">SensorsDataAPI.init(<span class="hljs-built_in">this</span>);<br></code></pre></td></tr></table></figure><h4 id="动态设置是否开启插件"><a href="#动态设置是否开启插件" class="headerlink" title="动态设置是否开启插件"></a>动态设置是否开启插件</h4>在gradle.properties中设置以下参数，false代表不关闭插件，true表示关闭插件，默认是false<figure class="highlight groovy"><table><tr><td class="code"><pre><code class="hljs groovy">peakmainPlugin.disableAppClick=<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="数据全埋点接口上传"><a href="#数据全埋点接口上传" class="headerlink" title="数据全埋点接口上传"></a>数据全埋点接口上传</h4><ul><li><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">SensorsDataAPI.getInstance().setOnUploadSensorsDataListener &#123; state: Int, data: String -&gt;<br>    when (state) &#123;<br>            <span class="hljs-comment">//$AppStart事件</span><br>        SensorsDataConstants.APP_START_EVENT_STATE,<br>            <span class="hljs-comment">//$AppEnd事件</span><br>        SensorsDataConstants.APP_END__EVENT_STATE,<br>            <span class="hljs-comment">//$AppViewScreen事件</span><br>        SensorsDataConstants.APP_VIEW_SCREEN__EVENT_STATE,<br>            <span class="hljs-comment">//$AppClick 事件</span><br>        SensorsDataConstants.APP_VIEW_CLICK__EVENT_STATE<br>        -&gt; <span class="hljs-keyword">if</span> (BuildConfig.DEBUG) &#123;<br>            Log.e(<span class="hljs-string">&quot;TAG&quot;</span>, <span class="hljs-string">&quot;埋点\n$data&quot;</span>)<br>        &#125;<br>        <span class="hljs-keyword">else</span> -&gt; <span class="hljs-keyword">if</span> (BuildConfig.DEBUG) &#123;<br>            Log.e(<span class="hljs-string">&quot;TAG&quot;</span>, data)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="在要拦截的页面设置拦截事件"><a href="#在要拦截的页面设置拦截事件" class="headerlink" title="在要拦截的页面设置拦截事件"></a>在要拦截的页面设置拦截事件</h4></li><li>需要在app.gradle中添加拦截包名前缀,比如我的项目前缀是com.peakmain<figure class="highlight groovy"><table><tr><td class="code"><pre><code class="hljs groovy">monitorPlugin &#123;<br>     ...<br>    interceptPackageName = <span class="hljs-string">&quot;com.peakmain&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure>目前只支持setOnClickListener事件拦截<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">SensorsDataAPI.getInstance().setOnUserAgreementListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SensorsDataAPI</span>.OnUserAgreementListener() &#123;<br>          <span class="hljs-meta">@Override</span><br>           <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">onUserAgreement</span><span class="hljs-params">()</span> &#123;<br>           <br>       &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>完整的举例代码如下：<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserAgreementListener</span><span class="hljs-params">(Activity activity)</span> &#123;<br>    isAcceptUserPrivacy = (Boolean) PreferencesUtils.getInstance(<span class="hljs-built_in">this</span>).getParam(Constants.HAS_ACCEPT_USER_PRIVACY, <span class="hljs-literal">false</span>);<br>    SensorsDataAPI.getInstance().setOnUserAgreementListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SensorsDataAPI</span>.OnUserAgreementListener() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">onUserAgreement</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">if</span> (!isAcceptUserPrivacy) &#123;<br>                <span class="hljs-comment">//没有同意</span><br>                <span class="hljs-type">AlertDialog</span> <span class="hljs-variable">dialog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AlertDialog</span>.Builder(activity)<br>                        .setContentView(R.layout.dialog_user_agreement)<br>                        .setCancelable(<span class="hljs-literal">false</span>)<span class="hljs-comment">//点击空白不可取消</span><br>                        .show();<br>                 <span class="hljs-comment">//设置用户协议的拦截事件为NULL</span><br>                SensorsDataAPI.getInstance().setOnUserAgreementListener(<span class="hljs-literal">null</span>);<br>                dialog.setOnClickListener(R.id.stv_refuse, v -&gt; &#123;<br>                    <span class="hljs-comment">//取消按钮的点击事件</span><br>                    dialog.dismiss();<br>                    setUserAgreementListener(activity);<br>                &#125;);<br>                dialog.setOnClickListener(R.id.stv_agreement, v -&gt; &#123;<br>                <span class="hljs-comment">//同意按钮的点击事件</span><br>                    com.peakmain.ui.utils.ToastUtils.showLong(<span class="hljs-string">&quot;同意了&quot;</span>);<br>                    PreferencesUtils.getInstance(activity).saveParams(Constants.HAS_ACCEPT_USER_PRIVACY, <span class="hljs-literal">true</span>);<br>                    dialog.dismiss();<br>                  <br>                &#125;);<br>            &#125;<br>            <span class="hljs-keyword">return</span> isAcceptUserPrivacy;<br>        &#125;<br>    &#125;);<br></code></pre></td></tr></table></figure><h4 id="获取方法耗时时间和打印方法参数和返回值"><a href="#获取方法耗时时间和打印方法参数和返回值" class="headerlink" title="获取方法耗时时间和打印方法参数和返回值"></a>获取方法耗时时间和打印方法参数和返回值</h4>在需要获取耗时时间的方法上方添加以下注解<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(&#123;ElementType.METHOD&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> LogMessage &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 是否打印方法耗时时间</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isLogTime</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * 是否打印方法的参数和返回值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isLogParametersReturnValue</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-literal">false</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="获取方法耗时时间"><a href="#获取方法耗时时间" class="headerlink" title="获取方法耗时时间"></a>获取方法耗时时间</h5>如果想获取方法耗时时间，则需要设置注解参数isLogTime为true，如：<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@LogMessage(isLogTime = true)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getMethodTime</span><span class="hljs-params">(<span class="hljs-type">long</span> l)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;getMethod&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/Peakmain/image@main/img/Gradle+ASM%E5%AE%9E%E6%88%98/1653707405132AsmActualCombat%E5%BC%80%E6%BA%90%E5%BA%931.png" alt="image.png"><h5 id="打印方法参数和返回值"><a href="#打印方法参数和返回值" class="headerlink" title="打印方法参数和返回值"></a>打印方法参数和返回值</h5>如果想打印方法参数和返回值，则需要设置注解参数isLogParametersReturnValue,如:<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@LogMessage(isLogParametersReturnValue = true)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getMethodParametersReturnValue</span><span class="hljs-params">(String name)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;treasure&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/Peakmain/image@main/img/Gradle+ASM%E5%AE%9E%E6%88%98/1653707407131AsmActualCombat%E5%BC%80%E6%BA%90%E5%BA%932.png" alt="image.png"><h5 id="获取方法耗时的同时打印方法参数和返回值"><a href="#获取方法耗时的同时打印方法参数和返回值" class="headerlink" title="获取方法耗时的同时打印方法参数和返回值"></a>获取方法耗时的同时打印方法参数和返回值</h5>也可支持获取方法耗时的同时打印方法参数和返回值<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@LogMessage(isLogTime = true, isLogParametersReturnValue = true)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;peakmain&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/Peakmain/image@main/img/Gradle+ASM%E5%AE%9E%E6%88%98/1653707408131AsmActualCombat%E5%BC%80%E6%BA%90%E5%BA%933.png" alt="image.png"><h4 id="打印方法的Frame"><a href="#打印方法的Frame" class="headerlink" title="打印方法的Frame"></a>打印方法的Frame</h4></li><li>1、开启堆栈分析，默认是禁用,false表示开启，true表示禁用<figure class="highlight groovy"><table><tr><td class="code"><pre><code class="hljs groovy">monitorPlugin &#123;<br>    disableStackMapFrame = <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li>2、如果想打印方法的Frame，只需要在方法上添加注解@LogFrameInfo，如:<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@LogFrameInfo</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testLogMethodStackMapFrame</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        Thread.sleep(<span class="hljs-number">1000</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;peakmain&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="替换方法体"><a href="#替换方法体" class="headerlink" title="替换方法体"></a>替换方法体</h4><h5 id="默认支持替换的方法"><a href="#默认支持替换的方法" class="headerlink" title="默认支持替换的方法"></a>默认支持替换的方法</h5><p><img src="https://cdn.jsdelivr.net/gh/Peakmain/image@main/img/Gradle+ASM%E5%AE%9E%E6%88%98/1653707409129AsmActualCombat%E5%BC%80%E6%BA%90%E5%BA%934.png" alt="image.png"></p><h5 id="白名单"><a href="#白名单" class="headerlink" title="白名单"></a>白名单</h5><p>如果想让某个类不被替换，可以在whiteList中添加，如：</p><figure class="highlight groovy"><table><tr><td class="code"><pre><code class="hljs groovy">monitorPlugin &#123;<br>    whiteList = [<br>            <span class="hljs-string">&quot;com.peakmain.asmactualcombat.utils.TestUtils&quot;</span>,<br>            <span class="hljs-string">&quot;com.peakmain.plugin&quot;</span><br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>必须写到具体某个类</strong>,只写到包名不可用，如：上面代码写到com.peakmain.asmactualcombat.utils并不能起到白名单作用</p></blockquote><h5 id="替换方法体-1"><a href="#替换方法体-1" class="headerlink" title="替换方法体"></a>替换方法体</h5><h6 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h6><ul><li>使用方式app.gradle中设置methodStatus为1<figure class="highlight groovy"><table><tr><td class="code"><pre><code class="hljs groovy">monitorPlugin &#123;<br>    methodStatus = <span class="hljs-number">1</span><br>&#125;<br></code></pre></td></tr></table></figure><h6 id="自定义替换方法的返回值"><a href="#自定义替换方法的返回值" class="headerlink" title="自定义替换方法的返回值"></a>自定义替换方法的返回值</h6><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">SensorsDataAPI.getInstance().setOnReplaceMethodListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OnReplaceMethodListener</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">onReplaceMethodListener</span><span class="hljs-params">(<span class="hljs-type">int</span> telephoneState, TelephonyManager manager, <span class="hljs-type">int</span> slotIndex)</span> &#123;<br>        <span class="hljs-keyword">switch</span> (telephoneState) &#123;<br>            <span class="hljs-keyword">case</span> SensorsDataConstants.GET_DEVICE_ID:<br>                LogUtils.e(<span class="hljs-string">&quot;替换GET_DEVICE_ID&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> SensorsDataConstants.GET_MEID:<br>                LogUtils.e(<span class="hljs-string">&quot;替换GET_MEID&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> SensorsDataConstants.GET_IMEI:<br>                LogUtils.e(<span class="hljs-string">&quot;替换GET_IMEI&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> SensorsDataConstants.GET_SUBSCRIBER_ID:<br>                LogUtils.e(<span class="hljs-string">&quot;替换GET_SUBSCRIBER_ID&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> SensorsDataConstants.GET_SIM_SERIAL_NUMBER:<br>                LogUtils.e(<span class="hljs-string">&quot;替换GET_SIM_SERIAL_NUMBER&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">onReplaceMethodListener</span><span class="hljs-params">(<span class="hljs-type">int</span> wifiInfoState, WifiInfo wifiInfo)</span> &#123;<br>        <span class="hljs-keyword">switch</span> (wifiInfoState) &#123;<br>            <span class="hljs-keyword">case</span> SensorsDataConstants.GET_MAC_ADDRESS:<br>                LogUtils.e(<span class="hljs-string">&quot;替换GET_MAC_ADDRESS&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> SensorsDataConstants.GET_SSID:<br>                LogUtils.e(<span class="hljs-string">&quot;替换GET_SSID&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> SensorsDataConstants.GET_BSSID:<br>                LogUtils.e(<span class="hljs-string">&quot;替换GET_SSIDGET_BSSID&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> SensorsDataConstants.GET_IP_ADDRESS:<br>                LogUtils.e(<span class="hljs-string">&quot;替换GET_IP_ADDRESS&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> WifiInfo <span class="hljs-title function_">onReplaceMethodListener</span><span class="hljs-params">(WifiManager wifiManager)</span> &#123;<br>        LogUtils.e(<span class="hljs-string">&quot;替换WifiManager&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">onReplaceMethodListener</span><span class="hljs-params">(SubscriptionInfo subscriptionInfo)</span> &#123;<br>        LogUtils.e(<span class="hljs-string">&quot;替换SubscriptionInfo&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;PackageInfo&gt; <span class="hljs-title function_">onReplaceMethodListener</span><span class="hljs-params">(PackageManager manager)</span> &#123;<br>        LogUtils.e(<span class="hljs-string">&quot;替换PackageManager&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">onReplaceMethodListener</span><span class="hljs-params">(ContentResolver resolver, String name)</span> &#123;<br>        LogUtils.e(<span class="hljs-string">&quot;替换ContentResolver&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;onReplaceMethodListener&quot;</span>;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h5 id="验证替换方法体"><a href="#验证替换方法体" class="headerlink" title="验证替换方法体"></a>验证替换方法体</h5>为了验证，我APP引入了极光推送的</li></ul><h6 id="未使用前"><a href="#未使用前" class="headerlink" title="未使用前"></a>未使用前</h6><p><strong>自身的APP</strong><br><img src="https://cdn.jsdelivr.net/gh/Peakmain/image@main/img/Gradle+ASM%E5%AE%9E%E6%88%98/1653707410129AsmActualCombat%E5%BC%80%E6%BA%90%E5%BA%935.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/Peakmain/image@main/img/Gradle+ASM%E5%AE%9E%E6%88%98/1653707411129AsmActualCombat%E5%BC%80%E6%BA%90%E5%BA%936.png" alt="image.png"><br><strong>极光</strong><br>关于极光，大家可以看这几个类的相关方法</p><ul><li><p>cn/jiguang/an/d的getConnectionInfo</p></li><li><p>cn/jiguang/ap/f的getConnectionInfo</p></li><li><p>cn/jiguang/l/b的getConnectionInfo</p></li><li><p>cn/jiguang/w/c的getDeviceId</p></li><li><p>cn/jiguang/f/a的getDeviceId</p></li><li><p>cn/jiguang/f/a的getConnectionInfo</p></li><li><p>cn/jiguang/f/a的getMacAddress</p></li><li><p>cn/jiguang/w/d的getDeviceId</p></li><li><p>我就不带大家看所有的了，我们挑几个<br>看cn/jiguang/f/a的getMacAddress和cn/jiguang/f/a的getDeviceId</p></li><li><p>因为我们看不到源码，我们只能通过字节码去看<br><img src="https://cdn.jsdelivr.net/gh/Peakmain/image@main/img/Gradle+ASM%E5%AE%9E%E6%88%98/1653707412128AsmActualCombat%E5%BC%80%E6%BA%90%E5%BA%937.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/Peakmain/image@main/img/Gradle+ASM%E5%AE%9E%E6%88%98/1653707413129AsmActualCombat%E5%BC%80%E6%BA%90%E5%BA%938.png" alt="image.png"></p><h6 id="使用替换后"><a href="#使用替换后" class="headerlink" title="使用替换后"></a>使用替换后</h6></li><li><p>添加依赖,app的build.gradle</p><figure class="highlight groovy"><table><tr><td class="code"><pre><code class="hljs groovy">monitorPlugin &#123;<br>    whiteList = [<br>            <span class="hljs-string">&quot;com.peakmain.asmactualcombat.utils.TestUtils&quot;</span>,<br>            <span class="hljs-string">&quot;com.peakmain.plugin&quot;</span><br>    ]<br>    methodStatus = <span class="hljs-number">1</span><span class="hljs-comment">//替换方法体</span><br>    disableStackMapFrame = <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p><strong>自身App</strong><br><img src="https://cdn.jsdelivr.net/gh/Peakmain/image@main/img/Gradle+ASM%E5%AE%9E%E6%88%98/1653707414128AsmActualCombat%E5%BC%80%E6%BA%90%E5%BA%939.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/Peakmain/image@main/img/Gradle+ASM%E5%AE%9E%E6%88%98/1653707415128AsmActualCombat%E5%BC%80%E6%BA%90%E5%BA%9310.png" alt="image.png"></p><p>可以发现白名单生效了</p><p><strong>极光推送</strong><br><img src="https://cdn.jsdelivr.net/gh/Peakmain/image@main/img/Gradle+ASM%E5%AE%9E%E6%88%98/1653707416130AsmActualCombat%E5%BC%80%E6%BA%90%E5%BA%9311.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/Peakmain/image@main/img/Gradle+ASM%E5%AE%9E%E6%88%98/1653707417130AsmActualCombat%E5%BC%80%E6%BA%90%E5%BA%9312.png" alt="image.png"></p><h4 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h4><ul><li>我的Github:<a href="https://github.com/peakmain">https://github.com/peakmain</a></li><li>我的简书:<a href="https://www.jianshu.com/u/3ff32f5aea98">https://www.jianshu.com/u/3ff32f5aea98</a></li><li>我的掘金:<a href="https://juejin.cn/user/175532853176152">https://juejin.cn/user/175532853176152</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Gradle和ASM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gradle </tag>
            
            <tag> asm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BasicLibrary——基于kotlin+jetpack+mvvm封装一套框架，提高Android开发效率</title>
      <link href="/archives/85ddffd8.html"/>
      <url>/archives/85ddffd8.html</url>
      
        <content type="html"><![CDATA[<h3 id="BasicLibrary"><a href="#BasicLibrary" class="headerlink" title="BasicLibrary"></a>BasicLibrary</h3><ul><li>BasicLibrary是基于kotlin+jetpack+mvvm封装的一套框架,提高Android开发效率</li><li>集成了自己封装的BasicUI库，关于BasicUI大家可以看我之前写的文章<a href="https://www.jianshu.com/p/78bcc6c3bbca">BasicUI常用UI组件和实用工具类封装，提高Android开发的效率</a></li></ul><p>还包括:</p><ul><li>MMKV的封装</li><li>防止多次点击事件的处理</li><li>Retrofit封装实现网络解耦</li><li>线程的切换，View的抖动效果</li><li>LiveData实现事件分发总线</li><li>项目地址：<a href="https://github.com/Peakmain/BasicLibrary">https://github.com/Peakmain/BasicLibrary</a></li></ul><h3 id="怎样使用"><a href="#怎样使用" class="headerlink" title="怎样使用"></a>怎样使用</h3><h4 id="Step-1-Add-the-JitPack-repository-to-your-build-file"><a href="#Step-1-Add-the-JitPack-repository-to-your-build-file" class="headerlink" title="Step 1. Add the JitPack repository to your build file"></a>Step 1. Add the JitPack repository to your build file</h4><ul><li>Add it in your root build.gradle at the end of repositories:<figure class="highlight groovy"><table><tr><td class="code"><pre><code class="hljs groovy">allprojects &#123;<br>repositories &#123;<br>...<br>maven &#123; url <span class="hljs-string">&#x27;https://jitpack.io&#x27;</span> &#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="Step-2-Add-the-dependency"><a href="#Step-2-Add-the-dependency" class="headerlink" title="Step 2. Add the dependency"></a>Step 2. Add the dependency</h4><p>-</p><figure class="highlight groovy"><table><tr><td class="code"><pre><code class="hljs groovy">dependencies &#123;<br>        implementation <span class="hljs-string">&#x27;com.github.Peakmain:BasicLibrary:1.0.4&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="功能列表"><a href="#功能列表" class="headerlink" title="功能列表"></a>功能列表</h3><h4 id="集成BaseActivity"><a href="#集成BaseActivity" class="headerlink" title="集成BaseActivity"></a>集成BaseActivity</h4><ul><li><figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">XXActivity</span></span>(<span class="hljs-keyword">override</span> <span class="hljs-keyword">val</span> layoutId: <span class="hljs-built_in">Int</span> = 自定义布局) :<br>    BaseActivity&lt;T : ViewDataBinding, E : BaseViewModel&gt;() &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">initView</span><span class="hljs-params">()</span></span> &#123;<br>    <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>T一般是Databinding布局实现自动生成的类</li><li>E需要继承于BaseViewModel，之后会自动实现initModel方法<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainViewModel</span> : <span class="hljs-type">BaseViewModel</span></span>() &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">initModel</span><span class="hljs-params">()</span></span> &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>initModel在initView之前，setContentView之后实现的方法</li><li>之后可在activity中直接使用mViewModel来获取E的实例，无需初始化</li><li>也可通过getViewModel(modelClass: Class<E>)获取ViewModel，并多次获取是同一个ViewModel实例<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin">Log.e(<span class="hljs-string">&quot;TAG&quot;</span>,<span class="hljs-string">&quot;测试<span class="hljs-subst">$&#123;getViewModel(MainViewModel::class.java)&#125;</span>&quot;</span>)<br>Log.e(<span class="hljs-string">&quot;TAG&quot;</span>,<span class="hljs-string">&quot;测试<span class="hljs-subst">$&#123;getViewModel(MainViewModel::class.java)&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure></li></ul><h4 id="集成BaseFragment"><a href="#集成BaseFragment" class="headerlink" title="集成BaseFragment"></a>集成BaseFragment</h4><ul><li><figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">XXFragment</span></span>(<span class="hljs-keyword">override</span> <span class="hljs-keyword">val</span> layoutId: <span class="hljs-built_in">Int</span> = 自定义布局) :<br>    BaseFragment&lt;T : ViewDataBinding, E : BaseViewModel&gt;() &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">initView</span><span class="hljs-params">(fragmentView:<span class="hljs-type">View</span>)</span></span> &#123;<br>    <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>其他性质和BaseActivity一样，不再阐述</li></ul><h4 id="MMKV的使用"><a href="#MMKV的使用" class="headerlink" title="MMKV的使用"></a>MMKV的使用</h4><ul><li>初始化<br>在Application中添加如下代码即可<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">try</span> &#123;<br>    TaskDispatcher dispatcher = BasicLibraryConfig.Companion.getInstance().getApp().getDispatcher();<br>    dispatcher.start();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>    e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure></li><li>使用<br>保存数据<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin">PreferencesUtils.getInstance(<span class="hljs-keyword">this</span>).saveParams(key,value)<span class="hljs-comment">//👈🏻key: String, objects: Any</span><br></code></pre></td></tr></table></figure>获取数据<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">PreferencesUtils.getInstance(this).getParam(key,defalutParams)//👈🏻key: String, defaultObject: Any?<br></code></pre></td></tr></table></figure></li><li>关于启动优化——启动器TaskDispatcher大家可以看我之前关于BasicUI的wiki：<a href="https://github.com/Peakmain/BasicUI/wiki/%E6%9C%89%E5%90%91%E6%97%A0%E7%8E%AF%E5%9B%BE%E5%AE%9E%E7%8E%B0%E5%90%AF%E5%8A%A8%E5%99%A8%E4%BC%98%E5%8C%96">有向无环图实现启动器优化</a></li></ul><h4 id="防止多次点击事件的处理"><a href="#防止多次点击事件的处理" class="headerlink" title="防止多次点击事件的处理"></a>防止多次点击事件的处理</h4><ul><li>立即处理<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin">mBinding.tvTitle.click&#123;<br>    <span class="hljs-comment">//todo 事件处理</span><br>&#125;<br></code></pre></td></tr></table></figure>延时处理<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">//或者</span><br>mBinding.tvTitle.clickViewDelay&#123;<br>    <span class="hljs-comment">//todo 事件处理</span><br>&#125;        <br><br></code></pre></td></tr></table></figure>TextView事件的拆分<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin">mBinding.tvTitle.clickClipListener( mBinding.tvTitle,leftClick = &#123;<br>      <span class="hljs-comment">//todo drawableLeft的点击事件</span><br>&#125;)&#123;<br>    <span class="hljs-comment">//todo drawableRight的点击事件</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="关于线程切换"><a href="#关于线程切换" class="headerlink" title="关于线程切换"></a>关于线程切换</h4>切换到主线程<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin">mBinding.tvTitle.ktxRunOnUiThread &#123; <br><br> &#125;<br><br></code></pre></td></tr></table></figure>延迟delayMills切换到主线程<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin">mBinding.tvTitle.ktxRunOnUiThreadDelay(delayMills) &#123; <br><br>&#125;<br></code></pre></td></tr></table></figure>延迟加载,默认是500ms<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin">mBinding.tvTitle.wait &#123; <br>    <br>&#125;<br></code></pre></td></tr></table></figure>延迟加载，设置延迟时间<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin">mBinding.tvTitle.wait(<span class="hljs-number">600</span>) &#123;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>延迟加载，设置延迟时间和单位<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin">mBinding.tvTitle.wait(<span class="hljs-number">600</span>,TimeUnit.SECONDS) &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="View的抖动效果"><a href="#View的抖动效果" class="headerlink" title="View的抖动效果"></a>View的抖动效果</h4><ul><li><figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin">View.shakeAnimation( fromXDelta: <span class="hljs-built_in">Float</span> = <span class="hljs-number">0f</span>,<br>                     toXDelta: <span class="hljs-built_in">Float</span> = <span class="hljs-number">5f</span>,<br>                     fromYDelta: <span class="hljs-built_in">Float</span> = <span class="hljs-number">0f</span>,<br>                     toYDelta: <span class="hljs-built_in">Float</span> = <span class="hljs-number">0f</span>,<br>                     duration: <span class="hljs-built_in">Long</span> = <span class="hljs-number">500</span>)<br></code></pre></td></tr></table></figure></li></ul><h4 id="网络库的使用"><a href="#网络库的使用" class="headerlink" title="网络库的使用"></a>网络库的使用</h4><ul><li>推荐在ViewModel中进行初始化</li><li>创建Service</li></ul><h5 id="service就是Retrofit请求网络层的Service接口"><a href="#service就是Retrofit请求网络层的Service接口" class="headerlink" title="service就是Retrofit请求网络层的Service接口"></a>service就是Retrofit请求网络层的Service接口</h5><ul><li><figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> api: WanAndroidApi = RetrofitManager.createService(WanAndroidApi::<span class="hljs-keyword">class</span>.java,<span class="hljs-string">&quot;https://wanandroid.com/&quot;</span>)<br></code></pre></td></tr></table></figure></li></ul><h5 id="如果想用自己的封装方法实现Service，可以调用以下方法"><a href="#如果想用自己的封装方法实现Service，可以调用以下方法" class="headerlink" title="如果想用自己的封装方法实现Service，可以调用以下方法"></a>如果想用自己的封装方法实现Service，可以调用以下方法</h5><ul><li><figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> api: WanAndroidApi = RetrofitManager.createService(WanAndroidApi::<span class="hljs-keyword">class</span>.java) &#123;<br>    <span class="hljs-comment">//todo 自己创建的Service</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>请求网络<br>第一种写法</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin">RetrofitManager.createData(api.getList(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>), <span class="hljs-keyword">object</span> : ApiStatus&lt;ApiModel&lt;ProjectBean&gt;&gt;() &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">before</span><span class="hljs-params">()</span></span> &#123;<br>        <span class="hljs-comment">//todo 调用请求网络前</span><br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">error</span><span class="hljs-params">(exception: <span class="hljs-type">Exception</span>)</span></span> &#123;<br>       <span class="hljs-comment">//todo 返回错误</span><br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">success</span><span class="hljs-params">(t: <span class="hljs-type">ApiModel</span>&lt;<span class="hljs-type">ProjectBean</span>&gt;)</span></span> &#123;<br>      <span class="hljs-comment">//返回成功</span><br>    &#125;<br><br><br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>第二种写法</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin">RetrofitManager.createData(api.projectTree, &#123;<br>    <span class="hljs-comment">//todo before()</span><br>&#125;, &#123;<br>    <span class="hljs-comment">//todo success(</span><br>&#125;, &#123;<br>    <span class="hljs-comment">//todo error()</span><br>&#125;)<br></code></pre></td></tr></table></figure></li></ul><h4 id="LiveData实现事件分发总线"><a href="#LiveData实现事件分发总线" class="headerlink" title="LiveData实现事件分发总线"></a>LiveData实现事件分发总线</h4><ul><li>注册或获取实例<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> rxBus = RxBus.instance.register&lt;<span class="hljs-built_in">Int</span>&gt;(<span class="hljs-string">&quot;test&quot;</span>)<br></code></pre></td></tr></table></figure></li><li>发送数据<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin">rxBus.setData(<span class="hljs-number">100</span>)<br></code></pre></td></tr></table></figure></li><li>接受数据<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> value=rxBus.value<br></code></pre></td></tr></table></figure><h4 id="CommonRecyclerDataBindingAdapter-RecycleView在Binding的使用"><a href="#CommonRecyclerDataBindingAdapter-RecycleView在Binding的使用" class="headerlink" title="CommonRecyclerDataBindingAdapter RecycleView在Binding的使用"></a>CommonRecyclerDataBindingAdapter RecycleView在Binding的使用</h4><figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestAdapter</span></span>(<span class="hljs-keyword">data</span>: MutableList&lt;String&gt;, layoutManager: LinearLayoutManager) :<br>    CommonRecyclerDataBindingAdapter&lt;String, RecyclerAdpterTestBinding&gt;(<br>        <span class="hljs-keyword">data</span>,<span class="hljs-comment">//👈🏻数据源</span><br>        R.layout.recycler_adpter_test,<span class="hljs-comment">//👈自定义布局</span><br>        DefaultAdapterFooterConfig&lt;String,RecyclerAdpterTestBinding&gt;(layoutManager).item<span class="hljs-comment">//👈是否显示加载更多,如果为null，则不显示加载更多，可自定义，可参考DefaultAdapterFooterConfig的源码</span><br>    ) &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">convert</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">        holder: <span class="hljs-type">BaseLibraryViewHolder</span>&lt;<span class="hljs-type">RecyclerAdpterTestBinding</span>&gt;,</span></span><br><span class="hljs-params"><span class="hljs-function">        itemData: <span class="hljs-type">String</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">        position: <span class="hljs-type">Int</span></span></span><br><span class="hljs-params"><span class="hljs-function">    )</span></span> &#123;<br>        <span class="hljs-keyword">val</span> binding = holder.itemDataBinding<br>        binding.vm = itemData<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="获取协程的全局异常"><a href="#获取协程的全局异常" class="headerlink" title="获取协程的全局异常"></a>获取协程的全局异常</h4><ul><li><figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin">  GlobalCoroutineExceptionHandler().coroutineExceptionCallback=&#123; context, exception-&gt;<br>       <span class="hljs-comment">//context:CoroutineContext</span><br><span class="hljs-comment">//exception:Throwable</span><br>   &#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="BindingAdapter的使用"><a href="#BindingAdapter的使用" class="headerlink" title="BindingAdapter的使用"></a>BindingAdapter的使用</h4><ul><li>①、文本添加*前缀<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin">app:asteriskPrevText=<span class="hljs-string">&quot;&quot;</span><span class="hljs-comment">//文本的名字</span><br>app:asteriskColor=<span class="hljs-string">&quot;&quot;</span><span class="hljs-comment">//星号的颜色</span><br></code></pre></td></tr></table></figure></li><li>②、设置image的url图片<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin">app:loadUrl=<span class="hljs-string">&quot;&quot;</span><span class="hljs-comment">//参数url</span><br></code></pre></td></tr></table></figure></li><li>③、设置view的visibility是View.VISIBLE还是View.Gone<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin">app:visibilityOrGone=<span class="hljs-string">&quot;@&#123;!vm.isShow&#125;&quot;</span><span class="hljs-comment">//true表示View.Visible,false则表示View.Gone</span><br></code></pre></td></tr></table></figure></li><li>④、设置view的visibility是View.VISIBLE还是View.InVisibile<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin">app:visibilityOrInVisible=<span class="hljs-string">&quot;@&#123;vm.isShow&#125;&quot;</span><span class="hljs-comment">//true表示View.Visible,false则表示View.InVisbile</span><br><br></code></pre></td></tr></table></figure></li><li>⑤、防止多次重复点击<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin">app:clickDelayTime=<span class="hljs-string">&quot;@&#123;vm.delayTime&#125;&quot;</span><span class="hljs-comment">//设置点击事件的延迟时间,参数为long类型</span><br>app:click=<span class="hljs-string">&quot;@&#123;vm.clickListener&#125;&quot;</span><span class="hljs-comment">//设置点击事件的事件处理</span><br></code></pre></td></tr></table></figure></li><li>⑥、textView的drawableLeft和drawableRight的点击事件<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin">app:drawableLeftClick=<span class="hljs-string">&quot;&quot;</span><span class="hljs-comment">//drawableLeft的点击事件</span><br>app:drawableRightClick=<span class="hljs-string">&quot;&quot;</span><span class="hljs-comment">//drawableRight的点击事件</span><br></code></pre></td></tr></table></figure><h4 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h4></li><li>简书(<a href="https://www.jianshu.com/u/3ff32f5aea98">https://www.jianshu.com/u/3ff32f5aea98</a>)</li><li>我的GitHub地址(<a href="https://links.jianshu.com/go?to=https://github.com/Peakmain">https://github.com/Peakmain</a>)</li></ul>]]></content>
      
      
      <categories>
          
          <category> Android 高级进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android 工具库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BasicUI常用UI组件和实用工具类封装，提高Android开发的效率</title>
      <link href="/archives/b5f422e3.html"/>
      <url>/archives/b5f422e3.html</url>
      
        <content type="html"><![CDATA[<p align="center">  <img src="https://s2.loli.net/2022/05/20/kdocZsSmfL98u5H.jpg"  /></p><h4 id="BasicUI"><a href="#BasicUI" class="headerlink" title="BasicUI"></a>BasicUI</h4><hr><p>BasicUI是一些常用的Android UI组件和一些实用工具类封装，提高Android的开发效率</p><p><strong>使用文档链接：<a href="https://github.com/Peakmain/BasicUI/wiki">https://github.com/Peakmain/BasicUI/wiki</a></strong></p><h4 id="How-to"><a href="#How-to" class="headerlink" title="How to"></a>How to</h4><ul><li>Step 1. Add the JitPack repository to your build file</li></ul><p>Add it in your root build.gradle at the end of repositories:</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin">allprojects &#123;<br>    repositories &#123;<br>        ...<br>        maven &#123; url <span class="hljs-string">&#x27;https://jitpack.io&#x27;</span> &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>Step 2. Add the dependency</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin">implementation <span class="hljs-string">&#x27;com.github.Peakmain:BasicUI:1.1.13&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>Step 3.some probleam</p><p>如果你的gradle版本比3.5.3高，可能会出现以下几个问题：</p><p>1、Entry name ‘AndroidManifest.xml’ collided</p><p><strong>解决办法：在gradle.properties添加以下代码</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">android.useNewApkCreator=false<br></code></pre></td></tr></table></figure><p> 2、如果安装失败，用adb install安装报错提示如下</p><p>  failed to install app-debug.apk: Failure [INSTALL_PARSE_FAILED_UNEXPECTED_EXCEPTION: Failed to parse /data/app/vmdl1335956833.tmp/base.apk: Corrupt XML binary file]</p><p><strong>解决办法:在添加依赖的build.gradle中添加以下代码</strong></p> <figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin">android&#123;<br>     packagingOptions &#123;<br>      exclude <span class="hljs-string">&#x27;AndroidManifest.xml&#x27;</span><br>   &#125;<br> &#125;<br></code></pre></td></tr></table></figure><p>3、如果提示报错</p><img width="908" alt="image" src="https://user-images.githubusercontent.com/26482737/167089658-d5176dbc-ae07-4fd3-ac91-8caf6cea7e00.png"> **解决办法:修改依赖如下** <figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin">implementation (<span class="hljs-string">&#x27;com.github.Peakmain:BasicUI:1.1.13&#x27;</span>)&#123;<br>    exclude group:<span class="hljs-string">&quot;com.github.yalantis&quot;</span>,module:<span class="hljs-string">&quot;ucrop&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure> AndroidManifest.xml添加如下代码 <figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin">&lt;activity android:name=<span class="hljs-string">&quot;com.yalantis.ucrop.UCropActivity&quot;</span> tools:node=<span class="hljs-string">&quot;remove&quot;</span>/&gt;<br></code></pre></td></tr></table></figure></li></ul><h5 id="Screenshot"><a href="#Screenshot" class="headerlink" title="Screenshot"></a>Screenshot</h5><p><img src="https://s2.loli.net/2022/05/20/jsTRSLnecMdHXI6.jpg" alt="首页.jpg">&emsp;<img src="https://s2.loli.net/2022/05/20/3zH8rtYXSkdi7FO.jpg" alt="dialog的使用.jpg">&emsp;<img src="https://s2.loli.net/2022/05/20/weYaR76PlZu1j2I.jpg" alt="navigtionBar的使用.jpg">&emsp;<img src="https://s2.loli.net/2022/05/20/axsQmFJzoH8cj9S.jpg" alt="popwindow_flowlayout的使用.jpg">&emsp;<br><img src="https://s2.loli.net/2022/05/20/sfvtMgPYUuzjo4n.jpg" alt="自带删除的EditText.jpg">&emsp;<img src="https://s2.loli.net/2022/05/20/39aOy8McqkhvQiZ.jpg" alt="TextView的封装.jpg">&emsp;<img src="https://s2.loli.net/2022/05/20/tvqV9KBywXEdYNa.gif" alt="仿今日头条的TableLayout.gif">&emsp;<img src="https://s2.loli.net/2022/05/20/COq9DSpxAkB2moa.gif" alt="加载loading.gif">&emsp;<br><img src="https://s2.loli.net/2022/05/20/Hr6K2xmUZf4uhlN.gif" alt="多条目菜单删选.gif">&emsp;<img src="https://s2.loli.net/2022/05/20/ojZlznW7IfSOkQV.jpg" alt="自定义键盘.jpg">&emsp;<img src="https://s2.loli.net/2022/05/20/bfGpYsd5tTC3cgl.jpg" alt="LinearlayoutManager分组.jpg">&emsp;<img src="https://s2.loli.net/2022/05/20/xhVrCGeLqIyZPgt.gif" alt="LinearlayoutManager悬浮.gif">&emsp;<br><img src="https://s2.loli.net/2022/05/20/gnUKSxbL6sXwlDf.jpg" alt="GridLayoutManager分组.jpg">&emsp;<img src="https://s2.loli.net/2022/05/20/fhVOBZbFAnmGqCe.gif" alt="GridLayoutManager悬浮.gif">&emsp;<img src="https://s2.loli.net/2022/05/20/Oej3WGVTCg5Uczy.gif" alt="ItemTouchHelp实现删除和土拖拽.gif">&emsp;<img src="https://s2.loli.net/2022/05/20/wOxc1dfTvRWBVP3.gif" alt="RecyclerView实现下拉刷新和加载更多2.gif">&emsp;<br><img src="https://s2.loli.net/2022/05/20/cHhQPRge8CjNTWA.gif" alt="RecyclerView实现下拉刷新和加载1.gif">&emsp;<img src="https://s2.loli.net/2022/05/20/e32cT4jPxC1Atul.gif" alt="RecyclerView实现多状态布局.gif">&emsp;<img src="https://s2.loli.net/2022/05/20/apo9PiRuKDH4FfN.gif" alt="图片压缩.gif">&emsp;<img src="../img/图片选择.gif"></img>&emsp;<br><img src="https://s2.loli.net/2022/05/20/z6xqems7tQRfPAW.gif" alt="文件选择.gif">&emsp;<img src="https://s2.loli.net/2022/05/20/pLaHbo1vgl6SYWn.gif" alt="选择器的使用.gif">&emsp;<img src="https://s2.loli.net/2022/05/20/brzdTNfvh5SlwF6.gif" alt="glide的使用.gif">&emsp;<img src="https://s2.loli.net/2022/05/20/qz3gbaorfAZncPC.jpg" alt="View创建Bitmap.jpg">&emsp;<br><img src="https://s2.loli.net/2022/05/20/PAtYjZqXJ8o2SpL.jpg" alt="OkHttp的封装.jpg">&emsp;<img src="https://s2.loli.net/2022/05/20/4koeM6L2DRJEqGN.gif" alt="文本高亮的使用.gif">&emsp;<img src="https://s2.loli.net/2022/05/20/dsuOp3hTBgiyZv8.jpg" alt="我的.jpg">&emsp;</p><h4 id="BasicUI-Demo-APP-安装包下载"><a href="#BasicUI-Demo-APP-安装包下载" class="headerlink" title="BasicUI Demo APP 安装包下载"></a>BasicUI Demo APP 安装包下载</h4><hr><ul><li>蒲公英下载地址</li></ul><p> <img src="https://www.pgyer.com/app/qrcode/BasicUI" alt="演示demo"></p><ul><li>Github下载地址：</li></ul><p><img src="https://s2.loli.net/2022/05/20/Ye1gBWxMXNUAZSO.png" alt="二维码.png"></p><h4 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h4><ul><li>简书： <a href="https://www.jianshu.com/u/3ff32f5aea98">https://www.jianshu.com/u/3ff32f5aea98</a></li><li>我的GitHub地址：<a href="https://github.com/Peakmain">https://github.com/Peakmain</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android 高级进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android UI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gradle 插件 + ASM 实战——入门篇</title>
      <link href="/archives/4d06e308.html"/>
      <url>/archives/4d06e308.html</url>
      
        <content type="html"><![CDATA[<h4 id="基本项目搭建"><a href="#基本项目搭建" class="headerlink" title="基本项目搭建"></a>基本项目搭建</h4><ul><li><p>项目新建一个Android Module，取名为plugin</p></li><li><p>删除无用资源，新建groovy、resources/META-INF/gradle-plugins目录<br><img src="https://cdn.jsdelivr.net/gh/Peakmain/image@main/img/gradle%E5%92%8CASM/1653125513215ASM+Gradle%E5%85%A5%E9%97%A811.png" alt="image.png"></p></li><li><p>修改build.gradle</p><figure class="highlight gradle"><table><tr><td class="code"><pre><code class="hljs gradle">apply plugin: <span class="hljs-string">&#x27;groovy&#x27;</span><br>apply plugin: <span class="hljs-string">&#x27;maven&#x27;</span><br><span class="hljs-keyword">dependencies</span> &#123;<br>    implementation gradleApi()<br>    implementation localGroovy()<br><br>    implementation <span class="hljs-string">&#x27;org.ow2.asm:asm:7.1&#x27;</span><br>    implementation <span class="hljs-string">&#x27;org.ow2.asm:asm-commons:7.1&#x27;</span><br>    implementation <span class="hljs-string">&#x27;org.ow2.asm:asm-analysis:7.1&#x27;</span><br>    implementation <span class="hljs-string">&#x27;org.ow2.asm:asm-util:7.0&#x27;</span><br>    implementation <span class="hljs-string">&#x27;org.ow2.asm:asm-tree:7.1&#x27;</span><br>    compileOnly <span class="hljs-string">&#x27;com.android.tools.build:gradle:3.4.1&#x27;</span>, &#123;<br>        <span class="hljs-keyword">exclude</span> <span class="hljs-keyword">group</span>:<span class="hljs-string">&#x27;org.ow2.asm&#x27;</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">repositories</span> &#123;<br>    jcenter()<br>&#125;<br><br>uploadArchives &#123;<br>    <span class="hljs-keyword">repositories</span>.mavenDeployer &#123;<br>        <span class="hljs-comment">//本地仓库路径，以放到项目根目录下的 repo 的文件夹为例</span><br>        repository(url: uri(<span class="hljs-string">&#x27;../repo&#x27;</span>))<br><br>        <span class="hljs-comment">//groupId</span><br>        pom.groupId = <span class="hljs-string">&#x27;com.peakmain&#x27;</span><br><br>        <span class="hljs-comment">//artifactId</span><br>        pom.artifactId = <span class="hljs-string">&#x27;android.plugin&#x27;</span><br><br>        <span class="hljs-comment">//插件版本号</span><br>        pom.version = <span class="hljs-string">&#x27;1.0.0&#x27;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>groovy目录新建一个文件BuryPointPlugin.groovy并放到com.peakmain.analytics.plugin目录下<br>这个便是我们的入口了，程序一编译我们就会来到这里并调用apply方法</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BuryPointPlugin</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Plugin</span>&lt;Project&gt;&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">apply</span><span class="hljs-params">(Project project)</span> &#123;<br>          println(<span class="hljs-string">&quot;欢迎来到gradle插件&quot;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>resources下新建一个com.peakmain.plugin.properties文件，注意：com.peakmain.plugin是我们引入的插件的名字，properties是后缀<br><img src="https://cdn.jsdelivr.net/gh/Peakmain/image@main/img/gradle%E5%92%8CASM/1653125398477ASM+Gradle%E5%85%A5%E9%97%A81.png" alt="image.png"></p></li><li><p>来到Android Studio的右上角Gradle，选择module plugin的Tasks<br><img src="https://cdn.jsdelivr.net/gh/Peakmain/image@main/img/gradle%E5%92%8CASM/1653125607077ASM+Gradle%E5%85%A5%E9%97%A82.png" alt="image.png"><br>双击之后我们在Android Studio目录下可以看到文件夹[repo]<br><img src="https://cdn.jsdelivr.net/gh/Peakmain/image@main/img/gradle%E5%92%8CASM/1653125608077ASM+Gradle%E5%85%A5%E9%97%A83.png" alt="image.png"></p></li><li><p>修改根目录的build.gradle<br><img src="https://cdn.jsdelivr.net/gh/Peakmain/image@main/img/gradle%E5%92%8CASM/1653125609078ASM+Gradle%E5%85%A5%E9%97%A84.png" alt="image.png"></p></li><li><p>修改app的build.gradle</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin">apply plugin: <span class="hljs-string">&#x27;com.peakmain.plugin&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>重新build之后看到这行打印就代表成功了<br><img src="https://cdn.jsdelivr.net/gh/Peakmain/image@main/img/gradle%E5%92%8CASM/1653125610077ASM+Gradle%E5%85%A5%E9%97%A85.png" alt="image.png"></p></li></ul><h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><ul><li>我们在build.gradle通常会看到这些扩展<br><img src="https://cdn.jsdelivr.net/gh/Peakmain/image@main/img/gradle%E5%92%8CASM/1653125611077ASM+Gradle%E5%85%A5%E9%97%A86.png" alt="image.png"></li></ul><p>如果我们想我们的项目也添加一个扩展，应该怎么做?</p><ul><li>groovy目录新建一个BuryPointExtension.groovy<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BuryPointExtension</span></span>&#123;<br>    boolean disableAppClick = <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure>修改BuryPointPlugin源码<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@Override</span><br>void apply(Project project) &#123;<br>    project.extensions.create(<span class="hljs-string">&quot;peakmainPlugin&quot;</span>, BuryPointExtension)<br>&#125;<br></code></pre></td></tr></table></figure></li><li>重新uploadArchives之后在app的build.gradle就可以使用了<br><img src="https://cdn.jsdelivr.net/gh/Peakmain/image@main/img/gradle%E5%92%8CASM/1653125612077ASM+Gradle%E5%85%A5%E9%97%A87.png" alt="image.png"></li></ul><p><strong>gradle.properties中设置依赖</strong></p><ul><li><p>上面我们在app的gradle中设置扩展依赖peakmainPlugin,那如果我们想在gradle.properties中设置，如何做呢？<br><img src="https://cdn.jsdelivr.net/gh/Peakmain/image@main/img/gradle%E5%92%8CASM/1653125612077ASM+Gradle%E5%85%A5%E9%97%A87.png" alt="image.png"></p></li><li><p>修改BuryPointPlugin源码</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BuryPointPlugin</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Plugin</span>&lt;Project&gt; &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">apply</span><span class="hljs-params">(Project project)</span> &#123;<br>        <span class="hljs-type">BuryPointExtension</span> <span class="hljs-variable">extension</span> <span class="hljs-operator">=</span> project.extensions.create(<span class="hljs-string">&quot;peakmainPlugin&quot;</span>, BuryPointExtension)<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">disableBuryPointPlugin</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>()<br>        <span class="hljs-comment">//gradle.properties是否存在</span><br>        <span class="hljs-keyword">if</span>(project.rootProject.file(<span class="hljs-string">&#x27;gradle.properties&#x27;</span>).exists())&#123;<br>             <span class="hljs-comment">//gradle.properties文件-&gt;输入流</span><br>            properties.load(project.rootProject.file(<span class="hljs-string">&#x27;gradle.properties&#x27;</span>).newDataInputStream())<br>            disableBuryPointPlugin=Boolean.parseBoolean(properties.getProperty(<span class="hljs-string">&quot;peakmainPlugin.disableAppClick&quot;</span>,<span class="hljs-string">&quot;false&quot;</span>))<br>        &#125;<br>        <span class="hljs-comment">//如果disableBuryPointPlugin可用</span><br>        <span class="hljs-keyword">if</span>(!disableBuryPointPlugin)&#123;<br>           println(<span class="hljs-string">&quot;欢迎来到peakmainPlugin&quot;</span>)<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            println(<span class="hljs-string">&quot;------------您已关闭了埋点插件--------------&quot;</span>)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>查看结果<br><img src="https://cdn.jsdelivr.net/gh/Peakmain/image@main/img/gradle%E5%92%8CASM/1653125614077ASM+Gradle%E5%85%A5%E9%97%A89.png" alt="image.png"></p></li><li><p>修改gralde.properties中的属性的值并查看结果<br><img src="https://cdn.jsdelivr.net/gh/Peakmain/image@main/img/gradle%E5%92%8CASM/1653125615079ASM+Gradle%E5%85%A5%E9%97%A810.png" alt="image.png"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Gradle和ASM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gradle </tag>
            
            <tag> asm </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
