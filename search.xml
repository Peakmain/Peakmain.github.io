<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>BasicLibrary——基于kotlin+jetpack+mvvm封装一套框架，提高Android开发效率</title>
      <link href="/archives/85ddffd8.html"/>
      <url>/archives/85ddffd8.html</url>
      
        <content type="html"><![CDATA[<h3 id="BasicLibrary"><a href="#BasicLibrary" class="headerlink" title="BasicLibrary"></a>BasicLibrary</h3><ul><li>BasicLibrary是基于kotlin+jetpack+mvvm封装的一套框架,提高Android开发效率</li><li>集成了自己封装的BasicUI库，关于BasicUI大家可以看我之前写的文章<a href="https://www.jianshu.com/p/78bcc6c3bbca">BasicUI常用UI组件和实用工具类封装，提高Android开发的效率</a></li></ul><p>还包括:</p><ul><li>MMKV的封装</li><li>防止多次点击事件的处理</li><li>Retrofit封装实现网络解耦</li><li>线程的切换，View的抖动效果</li><li>LiveData实现事件分发总线</li><li>项目地址：<a href="https://github.com/Peakmain/BasicLibrary">https://github.com/Peakmain/BasicLibrary</a></li></ul><h3 id="怎样使用"><a href="#怎样使用" class="headerlink" title="怎样使用"></a>怎样使用</h3><h4 id="Step-1-Add-the-JitPack-repository-to-your-build-file"><a href="#Step-1-Add-the-JitPack-repository-to-your-build-file" class="headerlink" title="Step 1. Add the JitPack repository to your build file"></a>Step 1. Add the JitPack repository to your build file</h4><ul><li>Add it in your root build.gradle at the end of repositories:<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">allprojects &#123;</span><br><span class="line">repositories &#123;</span><br><span class="line">...</span><br><span class="line">maven &#123; url &#x27;https://jitpack.io&#x27; &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="Step-2-Add-the-dependency"><a href="#Step-2-Add-the-dependency" class="headerlink" title="Step 2. Add the dependency"></a>Step 2. Add the dependency</h4><ul><li><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">        implementation &#x27;com.github.Peakmain:BasicLibrary:1.0.2&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="功能列表"><a href="#功能列表" class="headerlink" title="功能列表"></a>功能列表</h3><h4 id="集成BaseActivity"><a href="#集成BaseActivity" class="headerlink" title="集成BaseActivity"></a>集成BaseActivity</h4><ul><li><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class XXActivity(override val layoutId: Int = 自定义布局) :</span><br><span class="line">    BaseActivity&lt;T : ViewDataBinding, E : BaseViewModel&gt;() &#123;</span><br><span class="line">    override fun initView() &#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>T一般是Databinding布局实现自动生成的类</li><li>E需要继承于BaseViewModel，之后会自动实现initModel方法<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class MainViewModel : BaseViewModel() &#123;</span><br><span class="line">    override fun initModel() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>initModel在initView之前，setContentView之后实现的方法</li><li>之后可在activity中直接使用mViewModel来获取E的实例，无需初始化</li><li>也可通过getViewModel(modelClass: Class<E>)获取ViewModel，并多次获取是同一个ViewModel实例<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Log.e(&quot;TAG&quot;,&quot;测试$&#123;getViewModel(MainViewModel::class.java)&#125;&quot;)</span><br><span class="line">Log.e(&quot;TAG&quot;,&quot;测试$&#123;getViewModel(MainViewModel::class.java)&#125;&quot;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="集成BaseFragment"><a href="#集成BaseFragment" class="headerlink" title="集成BaseFragment"></a>集成BaseFragment</h4><ul><li><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class XXFragment(override val layoutId: Int = 自定义布局) :</span><br><span class="line">    BaseFragment&lt;T : ViewDataBinding, E : BaseViewModel&gt;() &#123;</span><br><span class="line">    override fun initView(fragmentView:View) &#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>其他性质和BaseActivity一样，不再阐述</li></ul><h4 id="MMKV的使用"><a href="#MMKV的使用" class="headerlink" title="MMKV的使用"></a>MMKV的使用</h4><ul><li>初始化<br>在Application中添加如下代码即可<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">    TaskDispatcher dispatcher = BasicLibraryConfig.Companion.getInstance().getApp().getDispatcher();</span><br><span class="line">    dispatcher.start();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>使用<br>保存数据<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PreferencesUtils.getInstance(this).saveParams(key,value)//👈🏻key: String, objects: Any</span><br></pre></td></tr></table></figure>获取数据<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PreferencesUtils.getInstance(this).getParam(key,defalutParams)//👈🏻key: String, defaultObject: Any?</span><br></pre></td></tr></table></figure></li><li>关于启动优化——启动器TaskDispatcher大家可以看我之前关于BasicUI的wiki：<a href="https://github.com/Peakmain/BasicUI/wiki/%E6%9C%89%E5%90%91%E6%97%A0%E7%8E%AF%E5%9B%BE%E5%AE%9E%E7%8E%B0%E5%90%AF%E5%8A%A8%E5%99%A8%E4%BC%98%E5%8C%96">有向无环图实现启动器优化</a></li></ul><h4 id="防止多次点击事件的处理"><a href="#防止多次点击事件的处理" class="headerlink" title="防止多次点击事件的处理"></a>防止多次点击事件的处理</h4><ul><li>立即处理<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mBinding.tvTitle.click&#123;</span><br><span class="line">    //todo 事件处理</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>延时处理<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//或者</span><br><span class="line">mBinding.tvTitle.clickViewDelay&#123;</span><br><span class="line">    //todo 事件处理</span><br><span class="line">&#125;        </span><br><span class="line"></span><br></pre></td></tr></table></figure>TextView事件的拆分<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mBinding.tvTitle.clickClipListener( mBinding.tvTitle,leftClick = &#123;</span><br><span class="line">      //todo drawableLeft的点击事件</span><br><span class="line">&#125;)&#123;</span><br><span class="line">    //todo drawableRight的点击事件</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="关于线程切换"><a href="#关于线程切换" class="headerlink" title="关于线程切换"></a>关于线程切换</h4>切换到主线程<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mBinding.tvTitle.ktxRunOnUiThread &#123; </span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>延迟delayMills切换到主线程<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mBinding.tvTitle.ktxRunOnUiThreadDelay(delayMills) &#123; </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>延迟加载,默认是500ms<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mBinding.tvTitle.wait &#123; </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>延迟加载，设置延迟时间<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mBinding.tvTitle.wait(600) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>延迟加载，设置延迟时间和单位<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mBinding.tvTitle.wait(600,TimeUnit.SECONDS) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="View的抖动效果"><a href="#View的抖动效果" class="headerlink" title="View的抖动效果"></a>View的抖动效果</h4><ul><li><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">View.shakeAnimation( fromXDelta: Float = 0f,</span><br><span class="line">                     toXDelta: Float = 5f,</span><br><span class="line">                     fromYDelta: Float = 0f,</span><br><span class="line">                     toYDelta: Float = 0f,</span><br><span class="line">                     duration: Long = 500)</span><br></pre></td></tr></table></figure></li></ul><h4 id="网络库的使用"><a href="#网络库的使用" class="headerlink" title="网络库的使用"></a>网络库的使用</h4><ul><li>推荐在ViewModel中进行初始化</li><li>创建Service</li></ul><h5 id="service就是Retrofit请求网络层的Service接口"><a href="#service就是Retrofit请求网络层的Service接口" class="headerlink" title="service就是Retrofit请求网络层的Service接口"></a>service就是Retrofit请求网络层的Service接口</h5><ul><li><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">private var api: WanAndroidApi = RetrofitManager.createService(WanAndroidApi::class.java,&quot;https://wanandroid.com/&quot;)</span><br></pre></td></tr></table></figure></li></ul><h5 id="如果想用自己的封装方法实现Service，可以调用以下方法"><a href="#如果想用自己的封装方法实现Service，可以调用以下方法" class="headerlink" title="如果想用自己的封装方法实现Service，可以调用以下方法"></a>如果想用自己的封装方法实现Service，可以调用以下方法</h5><ul><li><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">private var api: WanAndroidApi = RetrofitManager.createService(WanAndroidApi::class.java) &#123;</span><br><span class="line">    //todo 自己创建的Service</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>请求网络<br>第一种写法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RetrofitManager.createData(api.getList(0,10), object : ApiStatus&lt;ApiModel&lt;ProjectBean&gt;&gt;() &#123;</span><br><span class="line">    override fun before() &#123;</span><br><span class="line">        //todo 调用请求网络前</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    override fun error(exception: Exception) &#123;</span><br><span class="line">       //todo 返回错误</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    override fun success(t: ApiModel&lt;ProjectBean&gt;) &#123;</span><br><span class="line">      //返回成功</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>第二种写法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RetrofitManager.createData(api.projectTree, &#123;</span><br><span class="line">    //todo before()</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    //todo success(</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    //todo error()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="LiveData实现事件分发总线"><a href="#LiveData实现事件分发总线" class="headerlink" title="LiveData实现事件分发总线"></a>LiveData实现事件分发总线</h4><ul><li>注册或获取实例<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">val rxBus = RxBus.instance.register&lt;Int&gt;(&quot;test&quot;)</span><br></pre></td></tr></table></figure></li><li>发送数据<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rxBus.setData(100)</span><br></pre></td></tr></table></figure></li><li>接受数据<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">val value=rxBus.value</span><br></pre></td></tr></table></figure><h4 id="CommonRecyclerDataBindingAdapter-RecycleView在Binding的使用"><a href="#CommonRecyclerDataBindingAdapter-RecycleView在Binding的使用" class="headerlink" title="CommonRecyclerDataBindingAdapter RecycleView在Binding的使用"></a>CommonRecyclerDataBindingAdapter RecycleView在Binding的使用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class TestAdapter(data: MutableList&lt;String&gt;, layoutManager: LinearLayoutManager) :</span><br><span class="line">    CommonRecyclerDataBindingAdapter&lt;String, RecyclerAdpterTestBinding&gt;(</span><br><span class="line">        data,//👈🏻数据源</span><br><span class="line">        R.layout.recycler_adpter_test,//👈自定义布局</span><br><span class="line">        DefaultAdapterFooterConfig&lt;String,RecyclerAdpterTestBinding&gt;(layoutManager).item//👈是否显示加载更多,如果为null，则不显示加载更多，可自定义，可参考DefaultAdapterFooterConfig的源码</span><br><span class="line">    ) &#123;</span><br><span class="line">    override fun convert(</span><br><span class="line">        holder: BaseLibraryViewHolder&lt;RecyclerAdpterTestBinding&gt;,</span><br><span class="line">        itemData: String,</span><br><span class="line">        position: Int</span><br><span class="line">    ) &#123;</span><br><span class="line">        val binding = holder.itemDataBinding</span><br><span class="line">        binding.vm = itemData</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="获取协程的全局异常"><a href="#获取协程的全局异常" class="headerlink" title="获取协程的全局异常"></a>获取协程的全局异常</h4><ul><li><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  GlobalCoroutineExceptionHandler().coroutineExceptionCallback=&#123; context, exception-&gt;</span><br><span class="line">       //context:CoroutineContext</span><br><span class="line">//exception:Throwable</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="BindingAdapter的使用"><a href="#BindingAdapter的使用" class="headerlink" title="BindingAdapter的使用"></a>BindingAdapter的使用</h4><ul><li>①、文本添加*前缀<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app:asteriskPrevText=&quot;&quot;//文本的名字</span><br><span class="line">app:asteriskColor=&quot;&quot;//星号的颜色</span><br></pre></td></tr></table></figure></li><li>②、设置image的url图片<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app:loadUrl=&quot;&quot;//参数url</span><br></pre></td></tr></table></figure></li><li>③、设置view的visibility是View.VISIBLE还是View.Gone<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app:visibilityOrGone=&quot;@&#123;!vm.isShow&#125;&quot;//true表示View.Visible,false则表示View.Gone</span><br></pre></td></tr></table></figure></li><li>④、设置view的visibility是View.VISIBLE还是View.InVisibile<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app:visibilityOrInVisible=&quot;@&#123;vm.isShow&#125;&quot;//true表示View.Visible,false则表示View.InVisbile</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>⑤、防止多次重复点击<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app:clickDelayTime=&quot;@&#123;vm.delayTime&#125;&quot;//设置点击事件的延迟时间,参数为long类型</span><br><span class="line">app:click=&quot;@&#123;vm.clickListener&#125;&quot;//设置点击事件的事件处理</span><br></pre></td></tr></table></figure></li><li>⑥、textView的drawableLeft和drawableRight的点击事件<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app:drawableLeftClick=&quot;&quot;//drawableLeft的点击事件</span><br><span class="line">app:drawableRightClick=&quot;&quot;//drawableRight的点击事件</span><br></pre></td></tr></table></figure><h4 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h4></li><li>简书(<a href="https://www.jianshu.com/u/3ff32f5aea98">https://www.jianshu.com/u/3ff32f5aea98</a>)</li><li>我的GitHub地址(<a href="https://links.jianshu.com/go?to=https://github.com/Peakmain">https://github.com/Peakmain</a>)</li></ul>]]></content>
      
      
      <categories>
          
          <category> Android 高级进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android 工具库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BasicUI常用UI组件和实用工具类封装，提高Android开发的效率</title>
      <link href="/archives/b5f422e3.html"/>
      <url>/archives/b5f422e3.html</url>
      
        <content type="html"><![CDATA[<p align="center">  <img src="https://s2.loli.net/2022/05/20/kdocZsSmfL98u5H.jpg"  /></p><h4 id="BasicUI"><a href="#BasicUI" class="headerlink" title="BasicUI"></a>BasicUI</h4><hr><p>BasicUI是一些常用的Android UI组件和一些实用工具类封装，提高Android的开发效率</p><p><strong>使用文档链接：<a href="https://github.com/Peakmain/BasicUI/wiki">https://github.com/Peakmain/BasicUI/wiki</a></strong></p><h4 id="How-to"><a href="#How-to" class="headerlink" title="How to"></a>How to</h4><ul><li>Step 1. Add the JitPack repository to your build file</li></ul><p>Add it in your root build.gradle at the end of repositories:</p><pre><code>allprojects &#123;    repositories &#123;        ...        maven &#123; url &#39;https://jitpack.io&#39; &#125;    &#125;&#125;</code></pre><ul><li><p>Step 2. Add the dependency</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">implementation &#x27;com.github.Peakmain:BasicUI:1.1.13&#x27;</span><br></pre></td></tr></table></figure></li><li><p>Step 3.some probleam</p><p>如果你的gradle版本比3.5.3高，可能会出现以下几个问题：</p><p>1、Entry name ‘AndroidManifest.xml’ collided</p><p><strong>解决办法：在gradle.properties添加以下代码</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">android.useNewApkCreator=false</span><br></pre></td></tr></table></figure><p> 2、如果安装失败，用adb install安装报错提示如下</p><p>  failed to install app-debug.apk: Failure [INSTALL_PARSE_FAILED_UNEXPECTED_EXCEPTION: Failed to parse /data/app/vmdl1335956833.tmp/base.apk: Corrupt XML binary file]</p><p><strong>解决办法:在添加依赖的build.gradle中添加以下代码</strong></p> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">     packagingOptions &#123;</span><br><span class="line">      exclude &#x27;AndroidManifest.xml&#x27;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>3、如果提示报错</p><img width="908" alt="image" src="https://user-images.githubusercontent.com/26482737/167089658-d5176dbc-ae07-4fd3-ac91-8caf6cea7e00.png"> **解决办法:修改依赖如下** <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">implementation (&#x27;com.github.Peakmain:BasicUI:1.1.13&#x27;)&#123;</span><br><span class="line">    exclude group:&quot;com.github.yalantis&quot;,module:&quot;ucrop&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> AndroidManifest.xml添加如下代码 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;activity android:name=&quot;com.yalantis.ucrop.UCropActivity&quot; tools:node=&quot;remove&quot;/&gt;</span><br></pre></td></tr></table></figure>##### Screenshot</li></ul><p><img src="https://s2.loli.net/2022/05/20/jsTRSLnecMdHXI6.jpg" alt="首页.jpg">&emsp;<img src="https://s2.loli.net/2022/05/20/3zH8rtYXSkdi7FO.jpg" alt="dialog的使用.jpg">&emsp;<img src="https://s2.loli.net/2022/05/20/weYaR76PlZu1j2I.jpg" alt="navigtionBar的使用.jpg">&emsp;<img src="https://s2.loli.net/2022/05/20/axsQmFJzoH8cj9S.jpg" alt="popwindow_flowlayout的使用.jpg">&emsp;<br><img src="https://s2.loli.net/2022/05/20/sfvtMgPYUuzjo4n.jpg" alt="自带删除的EditText.jpg">&emsp;<img src="https://s2.loli.net/2022/05/20/39aOy8McqkhvQiZ.jpg" alt="TextView的封装.jpg">&emsp;<img src="https://s2.loli.net/2022/05/20/tvqV9KBywXEdYNa.gif" alt="仿今日头条的TableLayout.gif">&emsp;<img src="https://s2.loli.net/2022/05/20/COq9DSpxAkB2moa.gif" alt="加载loading.gif">&emsp;<br><img src="https://s2.loli.net/2022/05/20/Hr6K2xmUZf4uhlN.gif" alt="多条目菜单删选.gif">&emsp;<img src="https://s2.loli.net/2022/05/20/ojZlznW7IfSOkQV.jpg" alt="自定义键盘.jpg">&emsp;<img src="https://s2.loli.net/2022/05/20/bfGpYsd5tTC3cgl.jpg" alt="LinearlayoutManager分组.jpg">&emsp;<img src="https://s2.loli.net/2022/05/20/xhVrCGeLqIyZPgt.gif" alt="LinearlayoutManager悬浮.gif">&emsp;<br><img src="https://s2.loli.net/2022/05/20/gnUKSxbL6sXwlDf.jpg" alt="GridLayoutManager分组.jpg">&emsp;<img src="https://s2.loli.net/2022/05/20/fhVOBZbFAnmGqCe.gif" alt="GridLayoutManager悬浮.gif">&emsp;<img src="https://s2.loli.net/2022/05/20/Oej3WGVTCg5Uczy.gif" alt="ItemTouchHelp实现删除和土拖拽.gif">&emsp;<img src="https://s2.loli.net/2022/05/20/wOxc1dfTvRWBVP3.gif" alt="RecyclerView实现下拉刷新和加载更多2.gif">&emsp;<br><img src="https://s2.loli.net/2022/05/20/cHhQPRge8CjNTWA.gif" alt="RecyclerView实现下拉刷新和加载1.gif">&emsp;<img src="https://s2.loli.net/2022/05/20/e32cT4jPxC1Atul.gif" alt="RecyclerView实现多状态布局.gif">&emsp;<img src="https://s2.loli.net/2022/05/20/apo9PiRuKDH4FfN.gif" alt="图片压缩.gif">&emsp;<img src="../img/图片选择.gif"></img>&emsp;<br><img src="https://s2.loli.net/2022/05/20/z6xqems7tQRfPAW.gif" alt="文件选择.gif">&emsp;<img src="https://s2.loli.net/2022/05/20/pLaHbo1vgl6SYWn.gif" alt="选择器的使用.gif">&emsp;<img src="https://s2.loli.net/2022/05/20/brzdTNfvh5SlwF6.gif" alt="glide的使用.gif">&emsp;<img src="https://s2.loli.net/2022/05/20/qz3gbaorfAZncPC.jpg" alt="View创建Bitmap.jpg">&emsp;<br><img src="https://s2.loli.net/2022/05/20/PAtYjZqXJ8o2SpL.jpg" alt="OkHttp的封装.jpg">&emsp;<img src="https://s2.loli.net/2022/05/20/4koeM6L2DRJEqGN.gif" alt="文本高亮的使用.gif">&emsp;<img src="https://s2.loli.net/2022/05/20/dsuOp3hTBgiyZv8.jpg" alt="我的.jpg">&emsp;</p><h4 id="BasicUI-Demo-APP-安装包下载"><a href="#BasicUI-Demo-APP-安装包下载" class="headerlink" title="BasicUI Demo APP 安装包下载"></a>BasicUI Demo APP 安装包下载</h4><hr><ul><li>蒲公英下载地址</li></ul><p> <img src="https://www.pgyer.com/app/qrcode/BasicUI" alt="演示demo"></p><ul><li>Github下载地址：</li></ul><p><img src="https://s2.loli.net/2022/05/20/Ye1gBWxMXNUAZSO.png" alt="二维码.png"></p><h4 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h4><ul><li>简书： <a href="https://www.jianshu.com/u/3ff32f5aea98">https://www.jianshu.com/u/3ff32f5aea98</a></li><li>我的GitHub地址：<a href="https://github.com/Peakmain">https://github.com/Peakmain</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android 高级进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android UI </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
